# Painel GenX - Documentação do Projeto

## Visão Geral
O Painel GenX é uma aplicação web para gerenciamento de times de vôlei, focada em registrar dados de treinos, desempenhos e evolução dos atletas. A aplicação permite aos técnicos acompanhar o progresso dos atletas, registrar avaliações de fundamentos, controlar presença nos treinos e definir metas de evolução.

## Tecnologias Utilizadas
- **Frontend**: React, TypeScript, Tailwind CSS, shadcn/ui
- **Backend**: Supabase (PostgreSQL, Autenticação, APIs, Storage)
- **Gerenciamento de Estado**: React Query
- **Gráficos**: Recharts
- **Roteamento**: React Router Dom

## Principais Funcionalidades

### 1. Gestão de Atletas
- Cadastro e edição de atletas
- Filtros por time (masculino/feminino)
- Visualização detalhada por atleta
- Upload de fotos de atletas

### 2. Treinos
- Criação e montagem de treinos
- Associação de exercícios aos treinos
- Edição de exercícios em treinos já cadastrados
- Definição de treino do dia
- Avaliação de desempenho durante os treinos (acertos/erros)
- Sincronização em tempo real das avaliações

### 3. Controle de Presença
- Registro de presença nos treinos
- Histórico de presença por atleta

### 4. Desempenho
- Dashboard com métricas de desempenho
- Estatísticas por fundamento
- Evolução ao longo do tempo
- Desempenho detalhado por atleta

### 5. Metas e Evolução
- Definição de metas individuais para atletas
- Acompanhamento de progresso com gráficos
- Registro de evolução ao longo do tempo
- Filtros por status (Em andamento, Concluídas, Atrasadas)
- Histórico de atualizações das metas

### 6. Biblioteca de Exercícios
- Cadastro de exercícios com imagens ilustrativas
- Categorização de exercícios
- Reutilização de exercícios em diferentes treinos

## Estrutura do Banco de Dados

### Tabelas Principais
1. **athletes**: Cadastro de atletas do time
2. **exercicios**: Exercícios disponíveis para treinos
3. **treinos**: Dados dos treinos criados
4. **treinos_exercicios**: Relação entre treinos e exercícios
5. **treinos_do_dia**: Treino atual designado para o dia
6. **presencas/treinos_presencas**: Controle de presença nos treinos
7. **avaliacoes_fundamento**: Avaliações de fundamentos (acertos/erros)
8. **metas**: Metas de evolução para atletas
9. **historico_metas**: Histórico de atualizações das metas

### Buckets do Storage
1. **athletes-images**: Armazena fotos de atletas
2. **exercises-images**: Armazena imagens ilustrativas de exercícios

## Atualizações Recentes (2023-2024)

### 1. Atualizações na Estrutura do Banco de Dados

#### 1.1 Modificações na Tabela `avaliacoes_fundamento`

- **Adição de Novas Colunas**:
  - `observacoes` (TEXT): Campo para armazenar comentários qualitativos sobre a avaliação do atleta
  - `origem` (VARCHAR(50)): Campo para identificar a origem da avaliação (ex: avaliacao_exercicio, avaliacao_pos_treino)

- **Alteração na Coluna `exercicio_id`**:
  - Modificação da restrição NOT NULL para permitir valores NULL
  - Criação de um índice para otimizar consultas que filtram por exercicio_id
  - Esta modificação permite salvar avaliações pós-treino sem necessidade de vincular a um exercício específico

#### 1.2 Modificações na View `avaliacoes_exercicios`

- Atualização da definição da view para incluir as novas colunas `observacoes` e `origem`
- Criação de uma view de backup chamada `avaliacoes_exercicios_original`
- Adição de comentários nas colunas para documentação

### 2. Implementação de Novas Funcionalidades

#### 2.1 Avaliação Pós-Treino

- Implementação de um componente dedicado `PostTrainingEvaluation.tsx`
- Permite avaliar atletas em diferentes fundamentos após o encerramento do exercício
- Suporte para registrar:
  - Acertos e erros em cada fundamento
  - Observações qualitativas sobre a performance
  - Filtro de atletas por nome
  - Interface com abas separadas por fundamento

#### 2.2 Atualização do Componente de Ranking de Fundamentos

- Melhorias visuais no `RankingFundamentos.tsx`:
  - Remoção de áreas brancas do cartão de ranking
  - Adição de mensagem de parabenização para o atleta em primeiro lugar
  - Melhorias na responsividade do componente

#### 2.3 Componente de Exportação de Rankings

- Implementação do componente `ExportRankingButton.tsx`
- Suporte para exportação em formatos PDF e PNG
- Personalização de elementos como cor de fundo, título e escala
- Feedback visual durante o processo de exportação

#### 2.4 Avaliação em Tempo Real

- Componente `RealTimeEvaluation.tsx` para avaliações durante exercícios
- Interface intuitiva com botões para registrar acertos e erros
- Cálculo automático de eficiência e estatísticas
- Suporte para filtragem de atletas

### 3. Melhorias na Resiliência do Sistema

#### 3.1 Tratamento de Erros

- Mecanismo de fallback para armazenar avaliações no localStorage quando o banco de dados não está disponível
- Tratamento específico para erros de chave estrangeira e restrições de NOT NULL
- Sistema de backup para observações que não podem ser salvas no banco

#### 3.2 Atualizações no Service `treinosDoDiaService.ts`

- Modificação na função `salvarAvaliacaoExercicio` para tratar corretamente avaliações pós-treino
- Verificação inteligente do tipo de avaliação para determinar o valor correto de exercicio_id
- Mensagens de log detalhadas para facilitar a depuração

### 4. Scripts SQL para Manutenção do Banco de Dados

- `add_observacoes_column.sql`: Adiciona as colunas observacoes e origem
- `make_exercicio_id_nullable.sql`: Modifica a restrição NOT NULL da coluna exercicio_id
- Backup automático das definições das views antes de alterá-las

### 5. Correções e Melhorias

- Resolução de conflitos de merge nos arquivos após integrações com GitHub
- Adaptação do componente Select para evitar valores vazios
- Implementação de consultas separadas para contornar limitações de joins no Supabase
- Verificação e criação automática de tabelas quando não existem no banco
- Documentação detalhada sobre solução de problemas com Storage

## Scripts SQL

### Criação das Tabelas de Metas

```sql
-- Habilitar a extensão para gerar UUIDs
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Criar tabela de metas
CREATE TABLE IF NOT EXISTS public.metas (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  atleta_id UUID NOT NULL,
  titulo TEXT NOT NULL,
  descricao TEXT,
  progresso INTEGER DEFAULT 0 CHECK (progresso >= 0 AND progresso <= 100),
  data_alvo DATE NOT NULL,
  observacoes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT fk_atleta FOREIGN KEY (atleta_id) REFERENCES public.athletes(id) ON DELETE CASCADE
);

-- Criar tabela de histórico de progresso das metas
CREATE TABLE IF NOT EXISTS public.historico_metas (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  meta_id UUID NOT NULL,
  progresso INTEGER NOT NULL CHECK (progresso >= 0 AND progresso <= 100),
  observacao TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT fk_meta FOREIGN KEY (meta_id) REFERENCES public.metas(id) ON DELETE CASCADE
);
```

### Script para Modificar Restrição NOT NULL na Coluna exercicio_id

```sql
-- Script para tornar o campo exercicio_id da tabela avaliacoes_fundamento nullable
-- Este script permite que avaliações sem exercício específico (como avaliações pós-treino) sejam salvas

-- 1. Verificar se a coluna exercicio_id existe e se tem restrição NOT NULL
DO $$
DECLARE
  column_not_null BOOLEAN;
BEGIN
  -- Verificar se a coluna tem restrição NOT NULL
  SELECT is_nullable = 'NO' INTO column_not_null
  FROM information_schema.columns
  WHERE table_schema = 'public'
    AND table_name = 'avaliacoes_fundamento'
    AND column_name = 'exercicio_id';

  -- Exibir informação sobre o estado atual da coluna
  IF column_not_null THEN
    RAISE NOTICE 'A coluna exercicio_id possui restrição NOT NULL e será modificada';
  ELSE
    RAISE NOTICE 'A coluna exercicio_id já permite NULL, nenhuma alteração necessária';
  END IF;
END $$;

-- 2. Alterar a coluna para permitir valores NULL
ALTER TABLE avaliacoes_fundamento
ALTER COLUMN exercicio_id DROP NOT NULL;

-- 3. Adicionar um índice para melhorar performance em consultas
-- que filtram por exercicio_id
CREATE INDEX IF NOT EXISTS idx_avaliacoes_fundamento_exercicio_id 
ON avaliacoes_fundamento(exercicio_id)
WHERE exercicio_id IS NOT NULL;
```

## Configuração do Storage do Supabase

Para garantir que o upload de imagens funcione corretamente, é necessário configurar os buckets do Storage do Supabase:

1. Criar dois buckets:
   - `athletes-images`: para fotos de atletas
   - `exercises-images`: para imagens de exercícios

2. Configurar políticas de acesso para permitir upload e download de imagens.

O script `scripts/setup-storage.js` automatiza este processo, verificando a existência dos buckets e criando-os quando necessário.

## Estado Atual e Próximos Passos
1. O aplicativo possui todas as funcionalidades principais implementadas
2. A sincronização de dados entre dispositivos está funcionando
3. O módulo de Metas e Evolução está completo
4. Upload e gerenciamento de imagens corrigido e funcionando
5. Próximos passos incluem:
   - Implementar sincronização das avaliações armazenadas localmente quando a conexão for restaurada
   - Melhorar a visualização das observações nas interfaces de relatórios
   - Adicionar campo de observações também na avaliação em tempo real
   - Desenvolvimento de relatórios avançados para técnicos

## Documentação Adicional
- `STORAGE_README.md`: Instruções detalhadas para configuração do Storage
- `src/docs/UPLOAD_TROUBLESHOOTING.md`: Guia de solução de problemas de upload
- `src/docs/IMPLEMENTACAO.md`: Detalhes técnicos das correções implementadas
- `src/db/README.md`: Instruções para atualização do esquema do banco de dados

## Contribuidores
- Equipe de desenvolvimento GenX
